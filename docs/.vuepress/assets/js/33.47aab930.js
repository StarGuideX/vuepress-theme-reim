(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{380:function(e,t,n){"use strict";n.r(t);var o=n(25),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"微服务之ocelot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#微服务之ocelot"}},[e._v("#")]),e._v(" 微服务之Ocelot")]),e._v(" "),n("h2",{attrs:{id:"ocelot"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ocelot"}},[e._v("#")]),e._v(" Ocelot")]),e._v(" "),n("p",[e._v("这里有一个配置示例。配置有两个部分。一系列路线和一个全局配置。路由是告诉Ocelot如何处理上游请求的对象。全局配置有点粗糙，允许覆盖特定于路由的设置。如果您不想管理大量特定于路由的设置，那么它非常有用。")]),e._v(" "),n("p",[e._v('{\n"Routes": [],\n"GlobalConfiguration": {}\n}')]),e._v(" "),n("p",[e._v('{\n"DownstreamPathTemplate": "/",\n"UpstreamPathTemplate": "/",\n"UpstreamHttpMethod": [\n"Get"\n],\n"DownstreamHttpMethod": "",\n"DownstreamHttpVersion": "",\n"AddHeadersToRequest": {},\n"AddClaimsToRequest": {},\n"RouteClaimsRequirement": {},\n"AddQueriesToRequest": {},\n"RequestIdKey": "",\n"FileCacheOptions": {\n"TtlSeconds": 0,\n"Region": ""\n},\n"RouteIsCaseSensitive": false,\n"ServiceName": "",\n"DownstreamScheme": "http",\n"DownstreamHostAndPorts": [\n{\n"Host": "localhost",\n"Port": 51876,\n}\n],\n"QoSOptions": {\n"ExceptionsAllowedBeforeBreaking": 0,\n"DurationOfBreak": 0,\n"TimeoutValue": 0\n},\n"LoadBalancer": "",\n"RateLimitOptions": {\n"ClientWhitelist": [],\n"EnableRateLimiting": false,\n"Period": "",\n"PeriodTimespan": 0,\n"Limit": 0\n},\n"AuthenticationOptions": {\n"AuthenticationProviderKey": "",\n"AllowedScopes": []\n},\n"HttpHandlerOptions": {\n"AllowAutoRedirect": true,\n"UseCookieContainer": true,\n"UseTracing": true,\n"MaxConnectionsPerServer": 100\n},\n"DangerousAcceptAnyServerCertificateValidator": false\n}')])])}),[],!1,null,null,null);t.default=a.exports}}]);